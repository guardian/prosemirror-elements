import { css } from "@emotion/react";
import { useRef, useState } from "react";
import { Description } from "../../editorial-source-components/Description";
import type { InputHeadingProps } from "../../editorial-source-components/InputHeading";
import { InputHeading } from "../../editorial-source-components/InputHeading";
import { unescapeHtml } from "./html";

type PreviewProps = Partial<InputHeadingProps> & {
  html?: string;
  iframeUrl?: string;
};

type UntypedMessageData = {
  value: unknown;
  type: unknown;
};

type MessageData = {
  value: number;
  type: string;
};

const iframe = css`
  background-color: white;
  width: 100%;
  font-family: sans-serif;
`;

const crossDomainIframe = css`
  background-color: white;
  width: 100%;
  font-family: sans-serif;
  resize: vertical;
`;

const getDocHeight = (doc: Document | undefined) => {
  if (doc) {
    const body = doc.body;
    const html = doc.documentElement;
    const height = Math.max(
      body.scrollHeight,
      body.offsetHeight,
      html.offsetHeight
    );
    return height;
  }
  return undefined;
};

function isUntypedMessageData(data: unknown): data is UntypedMessageData {
  if (
    typeof data === "object" &&
    data !== null &&
    "value" in data &&
    "type" in data
  ) {
    return true;
  }
  return false;
}

function isMessageData(data: unknown): data is MessageData {
  if (
    isUntypedMessageData(data) &&
    typeof data.value === "number" &&
    typeof data.type === "string"
  )
    return true;
  return false;
}

export const Preview = ({
  html,
  iframeUrl,
  headingLabel = "Preview",
  ...rest
}: PreviewProps) => {
  const [height, setHeight] = useState("0px");
  const ref = useRef<HTMLIFrameElement>(null);

  const updateIframeHeight = () => {
    const heightOfContent = getDocHeight(ref.current?.contentWindow?.document);
    if (heightOfContent) {
      setHeight((heightOfContent + 4).toString() + "px");
    }
  };

  const listenToMessages = () => {
    window.addEventListener("message", (message) => {
      try {
        const data = JSON.parse(message.data) as unknown;

        if (isMessageData(data) && data.type === "set-height") {
          const height = data.value;
          setHeight(`${(height + 4).toString()}px`);
        }
      } catch (e) {
        // Catch JSON parse errors generated by other messages
      }
    });
  };

  const onLoad = () => {
    updateIframeHeight();
    setTimeout(() => {
      updateIframeHeight();
    }, 1000);
  };

  const onInteractiveLoad = () => {
    setHeight("200px;");
    listenToMessages();
  };

  let preview = null;

  if (iframeUrl) {
    preview = (
      <iframe
        src={iframeUrl}
        css={crossDomainIframe}
        height={height}
        ref={ref}
        onLoad={onInteractiveLoad}
      />
    );
  } else if (html) {
    preview = (
      <iframe
        srcDoc={unescapeHtml(html)}
        css={iframe}
        height={height}
        ref={ref}
        onLoad={onLoad}
        id="myFrame"
      />
    );
  } else {
    preview = <Description>No preview available.</Description>;
  }

  return (
    <div>
      <InputHeading headingLabel={headingLabel} {...rest} />
      {preview}
    </div>
  );
};
