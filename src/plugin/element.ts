import OrderedMap from "orderedmap";
import type { NodeSpec, Schema } from "prosemirror-model";
import type { EditorState, Transaction } from "prosemirror-state";
import { buildCommands, defaultPredicate } from "./helpers/prosemirror";
import {
  createNodesForFieldValues,
  getNodeSpecFromFieldSpec,
} from "./nodeSpec";
import { createPlugin } from "./plugin";
import type {
  ElementSpecMap,
  ExtractFieldValues,
  FieldSpec,
} from "./types/Element";

/**
 * Build an element plugin with the given element specs, along with the schema required
 * by those elements, and a method to insert elements into the document.
 */
export const buildElementPlugin = <
  FSpec extends FieldSpec<keyof FSpec>,
  ElementNames extends keyof ESpecMap,
  ESpecMap extends ElementSpecMap<FSpec, ElementNames>
>(
  elementSpecs: ESpecMap,
  predicate = defaultPredicate
) => {
  const insertElement = <Name extends ElementNames>(
    elementName: Extract<Name, string>,
    fieldValues: ExtractFieldValues<ESpecMap[Name]> = {}
  ) => (
    state: EditorState,
    dispatch: (tr: Transaction<Schema>) => void
  ): void => {
    const element = elementSpecs[elementName];
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- Typescript trusts our consumers to pass a correct element type, but we don't :)
    if (!element) {
      throw new Error(
        `[prosemirror-elements]: ${elementName} is not recognised. Only ${Object.keys(
          elementSpecs
        ).join(", ")} can be added`
      );
    }
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- we cannot be sure the schema has been amended
    if (!(state.schema as Schema).nodes[elementName]) {
      throw new Error(
        `[prosemirror-elements]: ${elementName} is not included in the state schema. Did you add the NodeSpec generated by this plugin to the schema?`
      );
    }

    const nodes = createNodesForFieldValues(
      state.schema,
      element.fieldSpec,
      fieldValues,
      elementName
    );

    const maybeNewNode = (state.schema as Schema).nodes[
      elementName
    ].createAndFill(
      {
        type: elementName,
      },
      nodes
    );
    if (maybeNewNode) {
      dispatch(state.tr.replaceSelectionWith(maybeNewNode));
    } else {
      console.warn(
        `[prosemirror-elements]: Could not create a node for ${elementName}`
      );
    }
  };

  const plugin = createPlugin(elementSpecs, buildCommands(predicate));
  let nodeSpec: OrderedMap<NodeSpec> = OrderedMap.from({});
  for (const elementName in elementSpecs) {
    nodeSpec = nodeSpec.append(
      getNodeSpecFromFieldSpec(elementName, elementSpecs[elementName].fieldSpec)
    );
  }

  return {
    insertElement,
    hasErrors: (state: EditorState) => plugin.getState(state).hasErrors,
    plugin,
    nodeSpec,
  };
};
